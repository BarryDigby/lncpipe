params {
// input file and genome reference
    fastq_ext = '*_{1,2}.clean.fq.gz'
    fasta_ref = '/data/database/human/hg38/genome.fa'

//star index
    star_idex = '/data/database/human/hg38/RSEM_STAR_Index'
//bowtie index for test
    bowtie2_index = '/data/database/human/hg19/Bowtie2Index/genome'
//hisat2 index for analysis
    hisat2_index = '/data/database/human/hg19/hisat2Index/genome'

//Annotation files
    gencode_annotation_gtf = "/data/database/human/hg38/annotation/gencode.v24.annotation.gtf"
    lncipedia_gtf = "/data/database/human/hg38/annotation/lncipedia_4_0_hg38.gtf"
    rRNAmask = "/data/database/human/hg38/annotation/hg38_rRNA.gtf"
// software path
    plekpath = '/home/zhaoqi/software/PLEK.1.2/'
    cncipath = '/data/software/CNCI-master'
    cpatpath = '/home/zhaoqi/software/CPAT/CPAT-1.2.2/'


    aligner = "star"
        sam_processor="sambamba" // If aligner is hisat, we need process sam file for downstream analysis
    qctools = "afterqc"
        afterqc_path="/data/software/afterQC/AfterQC-master/"



    //other options
    //sequencing strategy
    singleEnd = false
    //skip options
    skip_combine = false

    //resource information
    mem = 50
    cpu = 40
}

//configure process separately
process {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }

    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'finish' }
    maxRetries = 2
    maxErrors = '-1'

    // Process-specific resource requirements
//step 1
    $Run_afterQC {
        cpus = { check_max( 1 * task.attempt, 'cpus' ) }
        memory = { check_max( 20.GB * task.attempt, 'memory' ) }
        maxForks 6
    }
    $Run_fastQC {
        cpus = { check_max( 10 * task.attempt, 'cpus' ) }
        memory = { check_max( 20.GB * task.attempt, 'memory' ) }
        maxForks 6
    }
//step 2
    $fastq_star_alignment_For_discovery {
        cpus = { check_max( 10 * task.attempt, 'cpus' ) }
        memory = { check_max( 40.GB * task.attempt, 'memory' ) }
        maxForks 3
    }
    $fastq_tophat_alignment_For_discovery {
        cpus = { check_max( 10 * task.attempt, 'cpus' ) }
        memory = { check_max( 40.GB * task.attempt, 'memory' ) }
        maxForks 3
    }
    $fastq_hisat2_alignment_For_discovery {
        cpus = { check_max( 2 * task.attempt, 'cpus' ) }
        memory = { check_max( 10.GB * task.attempt, 'memory' ) }
        maxForks 6
    }
// step 3
    $Cufflinks_assembly {}
//
    $cuffmerge_assembled_gtf {}
//
    $Merge_assembled_gtf_with_GENCODE {}
//
    $Identify_novel_lncRNA_with_criterions {}
 //
    $Predict_coding_abbilities_by_PLEK {}
//
    $Predict_coding_abbilities_by_CPAT {}
//
    $Filter_lncRNA_by_coding_potential_result {}
//
    $Summary_renaming_and_classification {}
//
    $Rerun_CPAT_to_evaluate_lncRNA {}
//
    $Rerun_CPAT_to_evaluate_coding {}
//
    $Build_kallisto_index_of_GTF_for_quantification {}
//
    $Run_kallisto_for_quantification {}
//
    $Get_kallisto_matrix {}
//
    $Run_LncPipeReporter {}
}


manifest {
    homePage = 'https//github.com/likelet/LncPipe'
    description = 'LncPipe:a Nextflow-based Long non-coding RNA analysis PIPELINE'
    mainScript = 'LncRNAanalysisPipe.nf'
}


timeline {
    enabled: true
    file: "timeline.html"
}